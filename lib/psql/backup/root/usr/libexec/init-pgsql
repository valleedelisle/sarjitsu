#!/bin/bash

set -eu

PG_OOM_ADJUST_FILE=/proc/self/oom_score_adj
PG_OOM_ADJUST_VALUE=0
PGSTARTTIMEOUT=270

POSTGRES_PASSWORD=$1
POSTGRES_USER=$2
POSTGRES_DB=$3
CONTAINER_SCRIPTS_PATH=$4

# PGDATA=$4

# chmod 700 "$PGDATA"

export_vars=$(cgroup-limits) ; export $export_vars

export POSTGRESQL_MAX_CONNECTIONS=${POSTGRESQL_MAX_CONNECTIONS:-100}
export POSTGRESQL_MAX_PREPARED_TRANSACTIONS=${POSTGRESQL_MAX_PREPARED_TRANSACTIONS:-0}
# Perform auto-tuning based on the container cgroups limits (only when the
# limits are set).
# Users can still override this by setting the POSTGRESQL_SHARED_BUFFERS
# and POSTGRESQL_EFFECTIVE_CACHE_SIZE variables.
if [[ "${NO_MEMORY_LIMIT:-}" == "true" || -z "${MEMORY_LIMIT_IN_BYTES}" ]]; then
    export POSTGRESQL_SHARED_BUFFERS=${POSTGRESQL_SHARED_BUFFERS:-32MB}
    export POSTGRESQL_EFFECTIVE_CACHE_SIZE=${POSTGRESQL_EFFECTIVE_CACHE_SIZE:-128MB}
else
    # Use 1/4 of given memory for shared buffers
    shared_buffers_computed="$(($MEMORY_LIMIT_IN_BYTES/1024/1024/4))MB"
    # Setting effective_cache_size to 1/2 of total memory would be a normal conservative setting,
    effective_cache="$(($MEMORY_LIMIT_IN_BYTES/1024/1024/2))MB"
    export POSTGRESQL_SHARED_BUFFERS=${POSTGRESQL_SHARED_BUFFERS:-$shared_buffers_computed}
    export POSTGRESQL_EFFECTIVE_CACHE_SIZE=${POSTGRESQL_EFFECTIVE_CACHE_SIZE:-$effective_cache}
fi

psql_identifier_regex='^[a-zA-Z_][a-zA-Z0-9_]*$'
psql_password_regex='^[a-zA-Z0-9_~!@#$%^&*()-=<>,.?;:|]+$'

function usage() {
  if [ $# == 1 ]; then
    echo >&2 "error: $1"
  fi

  cat >&2 <<EOF
You must either specify the following environment variables:
  POSTGRES_USER (regex: '$psql_identifier_regex')
  POSTGRESQL_PASSWORD (regex: '$psql_password_regex')
  POSTGRES_DB (regex: '$psql_identifier_regex')
Or the following environment variable:
  POSTGRESQL_ADMIN_PASSWORD (regex: '$psql_password_regex')
Or both.
Optional settings:
  POSTGRESQL_MAX_CONNECTIONS (default: 100)
  POSTGRESQL_MAX_PREPARED_TRANSACTIONS (default: 0)
  POSTGRESQL_SHARED_BUFFERS (default: 32MB)
For more information see /usr/share/container-scripts/postgresql/README.md
within the container or visit https://github.com/openshift/postgresql.
EOF
  exit 1
}

function check_env_vars() {
  if [[ -v POSTGRES_USER || -v POSTGRES_PASSWORD || -v POSTGRES_DB ]]; then
    # one var means all three must be specified
    [[ -v POSTGRES_USER && -v POSTGRES_PASSWORD && -v POSTGRES_DB ]] || usage
    [[ "$POSTGRES_USER"     =~ $psql_identifier_regex ]] || usage
    [[ "$POSTGRES_PASSWORD" =~ $psql_password_regex   ]] || usage
    [[ "$POSTGRES_DB" =~ $psql_identifier_regex ]] || usage
    [ ${#POSTGRES_USER}     -le 63 ] || usage "PostgreSQL username too long (maximum 63 characters)"
    [ ${#POSTGRES_DB} -le 63 ] || usage "Database name too long (maximum 63 characters)"
    postinitdb_actions+=",simple_db"
  fi

  if [ -v POSTGRESQL_ADMIN_PASSWORD ]; then
    [[ "$POSTGRESQL_ADMIN_PASSWORD" =~ $psql_password_regex ]] || usage
    postinitdb_actions+=",admin_pass"
  fi

  case ",$postinitdb_actions," in
    *,admin_pass,*|*,simple_db,*) ;;
    *) usage ;;
  esac

}

check_env_vars

function set_pgdata() {
  # backwards compatibility case, we used to put the data here,
  # move it into our new expected location (userdata)
  if [ -e ${HOME}/data/PG_VERSION ]; then
    mkdir -p "${HOME}/data/userdata"
    pushd "${HOME}/data"
    # move everything except the userdata directory itself, into the userdata directory.
    # TIL: mv !(userdata) 'userdata' -- doesn't work on fedora:25 container. but does, in centos container
    bash -c "mv !(userdata) 'userdata'"
    popd
  else
    # create a subdirectory that the user owns
    mkdir -p "${HOME}/data/userdata"
  fi
  export PGDATA=$HOME/data/userdata
  # ensure sane perms for postgresql startup
  chmod 700 "$PGDATA"
}

set_pgdata

export POSTGRESQL_CONFIG_FILE=$HOME/openshift-custom-postgresql.conf

envsubst \
    < "${CONTAINER_SCRIPTS_PATH}/openshift-custom-postgresql.conf.template" \
    > "${POSTGRESQL_CONFIG_FILE}"

LANG=${LANG:-en_US.utf8} initdb -D "$PGDATA"

# sed -i -r s#'.*listen_addresses.*'#"listen_addresses = '*'"#g $PGDATA/postgresql.conf

# PostgreSQL configuration.
cat >> "$PGDATA/postgresql.conf" <<EOF
# Custom OpenShift configuration:
include '${POSTGRESQL_CONFIG_FILE}'
EOF

# Access control configuration.
# FIXME: would be nice-to-have if we could allow connections only from
#        specific hosts / subnet
cat >> "$PGDATA/pg_hba.conf" <<EOF
#
# Custom OpenShift configuration starting at this point.
#
# Allow connections from all hosts.
host all all all md5
# Allow replication connections from all hosts.
host replication all all md5
EOF

# # internal start of server in order to allow set-up using psql-client
# # does not listen on external TCP/IP and waits until start finishes
# PGUSER="${PGUSER:-postgres}" \
#       pg_ctl -D "$PGDATA" \
#       -o "-c listen_addresses='localhost'" \
#       -w start
pg_ctl -w start -o "-h ''"

# psql=( psql -v ON_ERROR_STOP=1 )
# pass="PASSWORD '$POSTGRES_PASSWORD'"
#
# "${psql[@]}" --username postgres <<-EOSQL
# 			CREATE USER "$POSTGRES_USER" WITH SUPERUSER $pass ;
# 		EOSQL
# echo
#
# psql+=( --username "$POSTGRES_USER" --dbname "$POSTGRES_DB" )
createuser "$POSTGRES_USER"
createdb --owner="$POSTGRES_USER" "$POSTGRES_DB"
psql --command "ALTER USER \"${POSTGRES_USER}\" WITH ENCRYPTED PASSWORD '${POSTGRES_PASSWORD}';"

# echo
# for f in /docker-entrypoint-initdb.d/*; do
#     case "$f" in
# 	*.sh)     echo "$0: running $f"; . "$f" ;;
# 	*.sql)    echo "$0: running $f"; "${psql[@]}" -f "$f"; echo ;;
# 	*.sql.gz) echo "$0: running $f"; gunzip -c "$f" | "${psql[@]}"; echo ;;
# 	*)        echo "$0: ignoring $f" ;;
#     esac
#     echo
# done

# pg_ctl -D "$PGDATA" -m fast -w stop
pg_ctl stop

echo
echo 'PostgreSQL init process complete; ready for start up.'
